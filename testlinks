#!/usr/bin/env python

import requests

import getopt
import HTMLParser
import os.path
import robotparser
import socket
import sys
import time
import urllib
import urlparse

USER_AGENT = "TestLinks"

def _looks_like_url(target):
    for clue in ("www", ".com", ".org", ".net", ".edu", ".html"):
        if clue in target:
            return True
    return False

class LinkTester(HTMLParser.HTMLParser):

    ### Overridden methods

    def __init__(self):
        HTMLParser.HTMLParser.__init__(self)
        self.verbose=True
        self.host_times={}
        self.cache={}
        self.rp = robotparser.RobotFileParser()

    def feed(self,lineno,line):

        # Keep track of the line number to enable better output
        self.lineno=lineno
        HTMLParser.HTMLParser.feed(self,line)

    def handle_starttag(self, tag, attrs):

        # Test the linked to URL and print the appropriate output
        if tag == "a":
            url = None
            for attribute, value in attrs:
                if attribute == "href":
                    url = value
                    break
            if not url:
                return
            self.output_testing(url)
            result, message = self.test_link(url)
            if result:
                self.output_okay()
            else:
                self.output_broken(url, message)

    ### Substantial new methods

    def test_link(self,link):

        """Return True if link is okay, False if link is broken."""

        # Have we already checked this link?
        if link in self.cache:
            return self.cache[link]

        # Determine what kind of link we're dealing with
        # and dispatch the testing accordingly.

        if link.startswith("/"):
            result = self.test_relative_link(link)
        elif link.startswith("#"):
            result = self.test_internal_link(link)
        elif link.startswith("mailto"):
            result = self.test_mail_link(link)
        elif link.startswith("ftp://"):
            result = self.test_ftp_link(link)
        elif link.startswith("gopher://"):
            result = self.test_gopher_link(link)
        else:
            result = self.test_absolute_link(link)

        # Cache the result incase this link comes up again
        self.cache[link]=result

        return result
    
    def test_internal_link(self, href):

        """Test a link to a "name"ed or id"ed" tag in this document."""

        return True, "Not implemented yet"  # Not yet implemented, shouldn't be too hard

    def test_mail_link(self, href):
    
        """Test a mailto: link"""

        return True, "Not implemented yet"  # No idea if this is possible

    def test_ftp_link(self, href):
    
        """Test an FTP link"""

        return True, "Not implemented yet"  # Not yet implemented, shouldn't be too hard

    def test_gopher_link(self, href):
    
        """Test a Gopher link"""

        return True, "Not implemented yet"  # Not yet implemented, shouldn't be too hard

    def test_relative_link(self, href):

        """Test a relative link."""

        if self.target_type == "http":
            url = self.urlparsed.scheme + "://" + self.urlparsed.netloc + href
        elif self.target_type == "local":
            if href.startswith("/"):
                href = href[1:]
            url = os.path.join(self.dirname, href)
        return self.test_absolute_link(url)

    def test_absolute_link(self, url):

        """Test an absolute link."""
        # Get rid of fragments (requires a bit of a dance!)
        urlparsed = urlparse.urlparse(url)
        urlparsed = list(urlparsed)
        urlparsed[5] = ""
        url = urlparse.urlunparse(urlparsed)
        urlparsed = urlparse.urlparse(url)
        if url.startswith("http://") or url.startswith("https://"):
            self.rp.set_url(urlparsed.scheme + "://" + urlparsed.netloc + "/robots.txt")
            if not self.rp.can_fetch(url, USER_AGENT):
                return True, "Skipped testing to abide by robots.txt."
            try:
                last_checked = self.host_times.get(urlparsed.netloc, 0)
                now = time.time()
                if now - last_checked < 5.0:
                    time.sleep((last_checked + 5 - now))
                self.host_times[urlparsed.netloc] = now
                response = requests.head(url, headers={"User-Agent" : USER_AGENT})
                code = response.status_code
                if self.strict:
                    return code == 200, "HTTP Status %d" % code
                else:
                    return code != 404, "HTTP Status %d" % code
            except requests.exceptions.ConnectionError as e:
                # Try to figure out what went wrong
                # Maybe bad hostname?
                try:
                    if ":" in urlparsed.netloc:
                        hostname, port = urlparsed.netloc.split(":")
                        port = int(port)
                    else:
                        hostname = urlparsed.netloc
                        port = None
                    socket.getaddrinfo(hostname, port)
                except socket.gaierror as e2:
                    if e2.errno == -2:
                        return False, "Bad hostname: %s" % hostname
                return False, "Unknown networking error"
            except ValueError as e:
                if "No schema supplied" in e.message:
                    return False, "No schema (missing http://?)"
                return False, e.message
        else:
            exists = os.path.exists(url)
            if exists:
                message = "Local file exists"
            else:
                message = "Local file %s does not exist" % url
            return exists, message

    ### Insubstantial new methods

    def output_testing(self,url):

        """Notify the user we are testing a link."""

        if self.verbose:
            print "%s:%d Testing \"%s\"..." % (self.target, self.lineno, url),

    def output_okay(self):

        """Notify the user a link tested okay."""

        if self.verbose:
            print "OK!"

    def output_broken(self, url, message):

        """Notify the user a link tested as broken."""
        
        if self.verbose:
            print "BROKEN! %s" % message
        else:
            print "%s:%d \"%s\" is broken! (%s) " % (self.target, self.lineno, url, message)

### Fairly standard functions to facilitate command line use

def usage():

    print "TestLinks 0.1"
    print "Copyright Luke Maurits, 2007"
    print "See http://www.luke.maurits/software/testlinks/ for latest version"
    print ""
    print "usage: testlinks [-s] [-v] [-h] file1 file2 file3..."
    print "-h prints this usage message."
    print "-s specified 'scrict mode': treat anything other than HTTP 200 as broken."
    print "-v specifies 'verbose mode': report results of every link check."

def main():

    tester = LinkTester()
    tester.verbose = False
    tester.strict = False

    try:
        options, targets = getopt.getopt(sys.argv[1:],"hsv")
    except getopt.GetoptError:
        print "Unrecognised option!"
        usage()
        sys.exit(2)
    if not targets:
        usage()
        sys.exit(2)
    for (o,a) in options:
        if o=="-s":
            tester.strict = True
        if o=="-v":
            tester.verbose = True
        if o=="-h":
            usage()
            sys.exit(0)

    for target in targets:
        # Be gentle and add http:// to targets which were probably supposed to have it
        if not os.path.exists(target) and _looks_like_url(target):
            target = "http://" + target

        # Make sure target is accessible
        try:
            fp = urllib.urlopen(target)
        except IOError:
            print "Could not open page %s!" % target
            continue 

        # Set Tester attributes
        tester.target = target
        if target.startswith("http://") or target.startswith("https://"):
            tester.target_type = "http"
            tester.urlparsed = urlparse.urlparse(target)
        else:
            tester.target_type = "local"
            tester.dirname = os.path.dirname(target)

        # Test target
        try:
            for line_number, line in enumerate(fp):
                tester.feed(line_number+1,line)
        except HTMLParser.HTMLParseError:
            print "Error parsing page %s: is this an (X)HTML document?"
        finally:
            fp.close()

    sys.exit(0)

if __name__=="__main__":
    main()
