#!/usr/bin/env python

import HTMLParser
from formatter import NullFormatter
from urllib import urlopen
from sys import argv, exit
from os.path import basename, dirname, exists
from getopt import getopt

class LinkTester(HTMLParser.HTMLParser):

    ### Overridden methods

    def __init__(self,verbose=False):

        HTMLParser.HTMLParser.__init__(self)
        self.verbose=verbose
        self.cache={}
        self.dirname=""
        self.filename=""
        self.lineno=0

    def feed(self,lineno,line):

        # Keep track of the line number to enable better output
        self.lineno=lineno
        HTMLParser.HTMLParser.feed(self,line)

    def handle_starttag(self, tag, attrs):

        # Test the linked to URL and print the appropriate output
        if tag == "a":
            for attribute, value in attrs:
                if attribute == "href":
                    self.output_testing(value)
                    if self.test_link(value):
                        self.output_okay()
                    else:
                        self.output_broken(value)

    ### Substantial new methods

    def test_link(self,link):

        """Return True if link is okay, False if link is broken."""

        # Have we already checked this link?

        if link in self.cache:
            return self.cache[link]
        else:
            # Determine what kind of link we're dealing with
            # and dispatch the testing accordingly.

            if link.startswith("#"):
                result = self.test_internal_link(link)
            elif link.startswith("mailto"):
                result = self.test_mail_link(link)
            elif "://" in link:
                result = self.test_absolute_link(link)
            else:
                result = self.test_relative_link(link)

            # Cache the result incase this link comes up again
            self.cache[link]=result

            return result
    
    def test_internal_link(self, href):

        """Test a link to a "name"ed or id"ed" tag in this document."""

        return True    # Not yet implemented, shouldn't be too hard

    def test_mail_link(self, href):
    
        """Test a mailto: link"""    # No idea if this is possible

        return True

    def test_relative_link(self, href):

        """Test a relative link (i.e. to a file in this directory)."""

        return self.test_absolute_link(self.dirname+"/"+href)

    def test_absolute_link(self, href):

        """Test an absolute link (e.g. http, ftp) with urlopen."""
        try:
            urlopen(href)
            return True
        except IOError:
            return False

    ### Insubstantial new methods

    def output_testing(self,url):

        """Notify the user we are testing a link."""

        if self.verbose:
            print "%s:%d Testing \"%s\"..." % (self.filename,
                self.lineno, url),

    def output_okay(self):

        """Notify the user a link tested okay."""

        if self.verbose:
            print "OK!"

    def output_broken(self,url):

        """Notify the user a link tested as broken."""
        
        if self.verbose:
            print "BROKEN! <==---"
        else:
            print "%s:%d \"%s\" is broken!" % (self.filename,
                self.lineno,url)

### Fairly standard functions to facilitate command line use

def usage():

    print "TestLinks 0.1"
    print "Copyright Luke Maurits, 2007"
    print "See http://www.luke.maurits/software/testlinks/ for latest version"
    print ""
    print "usage: testlinks [-s] [-h] file1 file2 file3..."
    print "-h prints this usage message."
    print "-s specifies 'silent mode': no output if no broken links are found."

def main():

    verbose = True

    try:
        options, files = getopt(argv[1:],"hs")
    except GetoptError:
        print "Unrecognised option!"
        usage()
        exit(2)

    if not files:
        usage()
        exit(2)
    
    for (o,a) in options:
        if o=="-s":
            verbose=False
        if o=="-h":
            usage()
            exit(0)

    tester = LinkTester(verbose)
    for filename in files:
        try:
            fp=urlopen(filename)
        except IOError:
            print "Could not open page %s!" % filename
            continue 
        tester.dirname=dirname(filename)
        tester.filename=basename(filename)
        try:
            for line_number, line in enumerate(fp):
                tester.feed(line_number+1,line)
        except HTMLParser.HTMLParseError:
            print "Error parsing page %s: is this an (X)HTML document?"
        fp.close()
    exit(0)

if __name__=="__main__":
    main()
